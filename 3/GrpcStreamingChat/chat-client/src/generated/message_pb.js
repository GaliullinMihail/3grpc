// source: message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.chat.ClientMessage', null, global);
goog.exportSymbol('proto.chat.ClientMessage.ContentCase', null, global);
goog.exportSymbol('proto.chat.ClientMessageChat', null, global);
goog.exportSymbol('proto.chat.ClientMessageLogin', null, global);
goog.exportSymbol('proto.chat.ServerMessage', null, global);
goog.exportSymbol('proto.chat.ServerMessage.ContentCase', null, global);
goog.exportSymbol('proto.chat.ServerMessageChat', null, global);
goog.exportSymbol('proto.chat.ServerMessageLoginFailure', null, global);
goog.exportSymbol('proto.chat.ServerMessageLoginSuccess', null, global);
goog.exportSymbol('proto.chat.ServerMessageUserJoined', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.chat.ClientMessage.oneofGroups_);
};
goog.inherits(proto.chat.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.ClientMessage.displayName = 'proto.chat.ClientMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.ClientMessageLogin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.ClientMessageLogin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.ClientMessageLogin.displayName = 'proto.chat.ClientMessageLogin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.ClientMessageChat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.ClientMessageChat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.ClientMessageChat.displayName = 'proto.chat.ClientMessageChat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.ServerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.chat.ServerMessage.oneofGroups_);
};
goog.inherits(proto.chat.ServerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.ServerMessage.displayName = 'proto.chat.ServerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.ServerMessageLoginFailure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.ServerMessageLoginFailure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.ServerMessageLoginFailure.displayName = 'proto.chat.ServerMessageLoginFailure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.ServerMessageLoginSuccess = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.ServerMessageLoginSuccess, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.ServerMessageLoginSuccess.displayName = 'proto.chat.ServerMessageLoginSuccess';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.ServerMessageUserJoined = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.ServerMessageUserJoined, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.ServerMessageUserJoined.displayName = 'proto.chat.ServerMessageUserJoined';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chat.ServerMessageChat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chat.ServerMessageChat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chat.ServerMessageChat.displayName = 'proto.chat.ServerMessageChat';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.chat.ClientMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.chat.ClientMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  LOGIN: 1,
  CHAT: 2
};

/**
 * @return {proto.chat.ClientMessage.ContentCase}
 */
proto.chat.ClientMessage.prototype.getContentCase = function() {
  return /** @type {proto.chat.ClientMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.chat.ClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    login: (f = msg.getLogin()) && proto.chat.ClientMessageLogin.toObject(includeInstance, f),
    chat: (f = msg.getChat()) && proto.chat.ClientMessageChat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.ClientMessage}
 */
proto.chat.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.ClientMessage;
  return proto.chat.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.ClientMessage}
 */
proto.chat.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chat.ClientMessageLogin;
      reader.readMessage(value,proto.chat.ClientMessageLogin.deserializeBinaryFromReader);
      msg.setLogin(value);
      break;
    case 2:
      var value = new proto.chat.ClientMessageChat;
      reader.readMessage(value,proto.chat.ClientMessageChat.deserializeBinaryFromReader);
      msg.setChat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogin();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.chat.ClientMessageLogin.serializeBinaryToWriter
    );
  }
  f = message.getChat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.chat.ClientMessageChat.serializeBinaryToWriter
    );
  }
};


/**
 * optional ClientMessageLogin login = 1;
 * @return {?proto.chat.ClientMessageLogin}
 */
proto.chat.ClientMessage.prototype.getLogin = function() {
  return /** @type{?proto.chat.ClientMessageLogin} */ (
    jspb.Message.getWrapperField(this, proto.chat.ClientMessageLogin, 1));
};


/**
 * @param {?proto.chat.ClientMessageLogin|undefined} value
 * @return {!proto.chat.ClientMessage} returns this
*/
proto.chat.ClientMessage.prototype.setLogin = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.chat.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chat.ClientMessage} returns this
 */
proto.chat.ClientMessage.prototype.clearLogin = function() {
  return this.setLogin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ClientMessage.prototype.hasLogin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ClientMessageChat chat = 2;
 * @return {?proto.chat.ClientMessageChat}
 */
proto.chat.ClientMessage.prototype.getChat = function() {
  return /** @type{?proto.chat.ClientMessageChat} */ (
    jspb.Message.getWrapperField(this, proto.chat.ClientMessageChat, 2));
};


/**
 * @param {?proto.chat.ClientMessageChat|undefined} value
 * @return {!proto.chat.ClientMessage} returns this
*/
proto.chat.ClientMessage.prototype.setChat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.chat.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chat.ClientMessage} returns this
 */
proto.chat.ClientMessage.prototype.clearChat = function() {
  return this.setChat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ClientMessage.prototype.hasChat = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.ClientMessageLogin.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.ClientMessageLogin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.ClientMessageLogin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ClientMessageLogin.toObject = function(includeInstance, msg) {
  var f, obj = {
    chatRoomId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.ClientMessageLogin}
 */
proto.chat.ClientMessageLogin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.ClientMessageLogin;
  return proto.chat.ClientMessageLogin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.ClientMessageLogin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.ClientMessageLogin}
 */
proto.chat.ClientMessageLogin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChatRoomId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.ClientMessageLogin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.ClientMessageLogin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.ClientMessageLogin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ClientMessageLogin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChatRoomId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string chat_room_id = 1;
 * @return {string}
 */
proto.chat.ClientMessageLogin.prototype.getChatRoomId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chat.ClientMessageLogin} returns this
 */
proto.chat.ClientMessageLogin.prototype.setChatRoomId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_name = 2;
 * @return {string}
 */
proto.chat.ClientMessageLogin.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.chat.ClientMessageLogin} returns this
 */
proto.chat.ClientMessageLogin.prototype.setUserName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.ClientMessageChat.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.ClientMessageChat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.ClientMessageChat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ClientMessageChat.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.ClientMessageChat}
 */
proto.chat.ClientMessageChat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.ClientMessageChat;
  return proto.chat.ClientMessageChat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.ClientMessageChat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.ClientMessageChat}
 */
proto.chat.ClientMessageChat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.ClientMessageChat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.ClientMessageChat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.ClientMessageChat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ClientMessageChat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.chat.ClientMessageChat.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chat.ClientMessageChat} returns this
 */
proto.chat.ClientMessageChat.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.chat.ServerMessage.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.chat.ServerMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  LOGIN_SUCCESS: 1,
  LOGIN_FAILURE: 2,
  USER_JOINED: 3,
  CHAT: 4
};

/**
 * @return {proto.chat.ServerMessage.ContentCase}
 */
proto.chat.ServerMessage.prototype.getContentCase = function() {
  return /** @type {proto.chat.ServerMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.chat.ServerMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.ServerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.ServerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.ServerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ServerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    loginSuccess: (f = msg.getLoginSuccess()) && proto.chat.ServerMessageLoginSuccess.toObject(includeInstance, f),
    loginFailure: (f = msg.getLoginFailure()) && proto.chat.ServerMessageLoginFailure.toObject(includeInstance, f),
    userJoined: (f = msg.getUserJoined()) && proto.chat.ServerMessageUserJoined.toObject(includeInstance, f),
    chat: (f = msg.getChat()) && proto.chat.ServerMessageChat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.ServerMessage}
 */
proto.chat.ServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.ServerMessage;
  return proto.chat.ServerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.ServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.ServerMessage}
 */
proto.chat.ServerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chat.ServerMessageLoginSuccess;
      reader.readMessage(value,proto.chat.ServerMessageLoginSuccess.deserializeBinaryFromReader);
      msg.setLoginSuccess(value);
      break;
    case 2:
      var value = new proto.chat.ServerMessageLoginFailure;
      reader.readMessage(value,proto.chat.ServerMessageLoginFailure.deserializeBinaryFromReader);
      msg.setLoginFailure(value);
      break;
    case 3:
      var value = new proto.chat.ServerMessageUserJoined;
      reader.readMessage(value,proto.chat.ServerMessageUserJoined.deserializeBinaryFromReader);
      msg.setUserJoined(value);
      break;
    case 4:
      var value = new proto.chat.ServerMessageChat;
      reader.readMessage(value,proto.chat.ServerMessageChat.deserializeBinaryFromReader);
      msg.setChat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.ServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.ServerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.ServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ServerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoginSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.chat.ServerMessageLoginSuccess.serializeBinaryToWriter
    );
  }
  f = message.getLoginFailure();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.chat.ServerMessageLoginFailure.serializeBinaryToWriter
    );
  }
  f = message.getUserJoined();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.chat.ServerMessageUserJoined.serializeBinaryToWriter
    );
  }
  f = message.getChat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.chat.ServerMessageChat.serializeBinaryToWriter
    );
  }
};


/**
 * optional ServerMessageLoginSuccess login_success = 1;
 * @return {?proto.chat.ServerMessageLoginSuccess}
 */
proto.chat.ServerMessage.prototype.getLoginSuccess = function() {
  return /** @type{?proto.chat.ServerMessageLoginSuccess} */ (
    jspb.Message.getWrapperField(this, proto.chat.ServerMessageLoginSuccess, 1));
};


/**
 * @param {?proto.chat.ServerMessageLoginSuccess|undefined} value
 * @return {!proto.chat.ServerMessage} returns this
*/
proto.chat.ServerMessage.prototype.setLoginSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.chat.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chat.ServerMessage} returns this
 */
proto.chat.ServerMessage.prototype.clearLoginSuccess = function() {
  return this.setLoginSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ServerMessage.prototype.hasLoginSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ServerMessageLoginFailure login_failure = 2;
 * @return {?proto.chat.ServerMessageLoginFailure}
 */
proto.chat.ServerMessage.prototype.getLoginFailure = function() {
  return /** @type{?proto.chat.ServerMessageLoginFailure} */ (
    jspb.Message.getWrapperField(this, proto.chat.ServerMessageLoginFailure, 2));
};


/**
 * @param {?proto.chat.ServerMessageLoginFailure|undefined} value
 * @return {!proto.chat.ServerMessage} returns this
*/
proto.chat.ServerMessage.prototype.setLoginFailure = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.chat.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chat.ServerMessage} returns this
 */
proto.chat.ServerMessage.prototype.clearLoginFailure = function() {
  return this.setLoginFailure(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ServerMessage.prototype.hasLoginFailure = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ServerMessageUserJoined user_joined = 3;
 * @return {?proto.chat.ServerMessageUserJoined}
 */
proto.chat.ServerMessage.prototype.getUserJoined = function() {
  return /** @type{?proto.chat.ServerMessageUserJoined} */ (
    jspb.Message.getWrapperField(this, proto.chat.ServerMessageUserJoined, 3));
};


/**
 * @param {?proto.chat.ServerMessageUserJoined|undefined} value
 * @return {!proto.chat.ServerMessage} returns this
*/
proto.chat.ServerMessage.prototype.setUserJoined = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.chat.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chat.ServerMessage} returns this
 */
proto.chat.ServerMessage.prototype.clearUserJoined = function() {
  return this.setUserJoined(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ServerMessage.prototype.hasUserJoined = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ServerMessageChat chat = 4;
 * @return {?proto.chat.ServerMessageChat}
 */
proto.chat.ServerMessage.prototype.getChat = function() {
  return /** @type{?proto.chat.ServerMessageChat} */ (
    jspb.Message.getWrapperField(this, proto.chat.ServerMessageChat, 4));
};


/**
 * @param {?proto.chat.ServerMessageChat|undefined} value
 * @return {!proto.chat.ServerMessage} returns this
*/
proto.chat.ServerMessage.prototype.setChat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.chat.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.chat.ServerMessage} returns this
 */
proto.chat.ServerMessage.prototype.clearChat = function() {
  return this.setChat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chat.ServerMessage.prototype.hasChat = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.ServerMessageLoginFailure.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.ServerMessageLoginFailure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.ServerMessageLoginFailure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ServerMessageLoginFailure.toObject = function(includeInstance, msg) {
  var f, obj = {
    reason: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.ServerMessageLoginFailure}
 */
proto.chat.ServerMessageLoginFailure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.ServerMessageLoginFailure;
  return proto.chat.ServerMessageLoginFailure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.ServerMessageLoginFailure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.ServerMessageLoginFailure}
 */
proto.chat.ServerMessageLoginFailure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.ServerMessageLoginFailure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.ServerMessageLoginFailure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.ServerMessageLoginFailure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ServerMessageLoginFailure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReason();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string reason = 1;
 * @return {string}
 */
proto.chat.ServerMessageLoginFailure.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chat.ServerMessageLoginFailure} returns this
 */
proto.chat.ServerMessageLoginFailure.prototype.setReason = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.ServerMessageLoginSuccess.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.ServerMessageLoginSuccess.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.ServerMessageLoginSuccess} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ServerMessageLoginSuccess.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.ServerMessageLoginSuccess}
 */
proto.chat.ServerMessageLoginSuccess.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.ServerMessageLoginSuccess;
  return proto.chat.ServerMessageLoginSuccess.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.ServerMessageLoginSuccess} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.ServerMessageLoginSuccess}
 */
proto.chat.ServerMessageLoginSuccess.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.ServerMessageLoginSuccess.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.ServerMessageLoginSuccess.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.ServerMessageLoginSuccess} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ServerMessageLoginSuccess.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.ServerMessageUserJoined.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.ServerMessageUserJoined.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.ServerMessageUserJoined} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ServerMessageUserJoined.toObject = function(includeInstance, msg) {
  var f, obj = {
    userName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.ServerMessageUserJoined}
 */
proto.chat.ServerMessageUserJoined.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.ServerMessageUserJoined;
  return proto.chat.ServerMessageUserJoined.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.ServerMessageUserJoined} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.ServerMessageUserJoined}
 */
proto.chat.ServerMessageUserJoined.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.ServerMessageUserJoined.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.ServerMessageUserJoined.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.ServerMessageUserJoined} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ServerMessageUserJoined.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_name = 1;
 * @return {string}
 */
proto.chat.ServerMessageUserJoined.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chat.ServerMessageUserJoined} returns this
 */
proto.chat.ServerMessageUserJoined.prototype.setUserName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chat.ServerMessageChat.prototype.toObject = function(opt_includeInstance) {
  return proto.chat.ServerMessageChat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chat.ServerMessageChat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ServerMessageChat.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chat.ServerMessageChat}
 */
proto.chat.ServerMessageChat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chat.ServerMessageChat;
  return proto.chat.ServerMessageChat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chat.ServerMessageChat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chat.ServerMessageChat}
 */
proto.chat.ServerMessageChat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chat.ServerMessageChat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chat.ServerMessageChat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chat.ServerMessageChat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chat.ServerMessageChat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.chat.ServerMessageChat.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.chat.ServerMessageChat} returns this
 */
proto.chat.ServerMessageChat.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_name = 2;
 * @return {string}
 */
proto.chat.ServerMessageChat.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.chat.ServerMessageChat} returns this
 */
proto.chat.ServerMessageChat.prototype.setUserName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.chat);
